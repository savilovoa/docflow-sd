
&Вместо("ОбработатьМониторингЭлектроннойПочты")
Процедура ЧСД_ОбработатьМониторингЭлектроннойПочты()
	//ПродолжитьВызов();
	//Возврат;
	//
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ Константы.СД_ИнтеграцияСЭлПочтой.Получить() Тогда
		Возврат;
	КонецЕсли;

	КоличествоСозданныхОбъектов = 0;
	УчетнаяЗаписьМониторинга = "";
	
	//ТаблицаЗаголовков = ПолучитьТаблицуЗаголовковВходящихСообщенийВнутреннейПочты();
	
	//сформируем таблицу для загрузки пояснений по уже существующим заявкам
	ТаблицаПоясненийКСуществующимЗаявкам = Новый ТаблицаЗначений;
	ТаблицаПоясненийКСуществующимЗаявкам.Колонки.Добавить("Заявка", Новый ОписаниеТипов("ДокументСсылка.СД_Заявка"));
	ТаблицаПоясненийКСуществующимЗаявкам.Колонки.Добавить("UID", Новый ОписаниеТипов("ДокументСсылка.ВходящееПисьмо"));
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	СД_МониторингЭлПочты.Ссылка КАК СсылкаНаМониторинг,
	                    |	СД_МониторингЭлПочты.УчетнаяЗаписьПриемаЭлПочты КАК УчетнаяЗаписьМониторинга,
	                    |	СД_МониторингЭлПочты.СервисТехПоддержки КАК СервисТехПоддержки,
	                    |	ВходящееПисьмо.ОтправительАдресат КАК Отправитель,
	                    |	ВходящееПисьмо.ОтправительАдресат КАК ИмяОтправителя,
	                    |	ВходящееПисьмо.Тема КАК Тема,
	                    |	СведенияОПрочтении.Прочтен КАК Прочтен,
	                    |	ВходящееПисьмо.Важность КАК Важность,
	                    |	ВходящееПисьмо.Кодировка КАК Кодировка,
	                    |	ВходящееПисьмо.Ссылка КАК UID,
	                    |	ВходящееПисьмо.ДатаОтправки КАК ДатаОтправления,
	                    |	ВходящееПисьмо.Размер КАК Размер,
	                    |	ВходящееПисьмо.ИдентификаторСообщения КАК ИдентификаторСообщения,
	                    |	ВходящееПисьмо.ТипТекста КАК ТипТекста,
	                    |	ВЫБОР
	                    |		КОГДА ВходящееПисьмо.ТипТекста = ЗНАЧЕНИЕ(Перечисление.ТипыТекстовПочтовыхСообщений.ПростойТекст)
	                    |			ТОГДА ВходящееПисьмо.ТекстПисьмаПростойТекстХранилище
	                    |		КОГДА ВходящееПисьмо.ТипТекста = ЗНАЧЕНИЕ(Перечисление.ТипыТекстовПочтовыхСообщений.HTML)
	                    |			ТОГДА ВходящееПисьмо.ТекстПисьмаHTMLХранилище
	                    |		ИНАЧЕ ВходящееПисьмо.ТекстПисьмаРазмеченныйТекстХранилище
	                    |	КОНЕЦ КАК ТекстПисьмаХранилище,
	                    |	ВходящееПисьмо.Представление КАК Представление,
	                    |	СД_Сервисы.Ч_ПользовательПочты КАК ПользовательПочты
	                    |ИЗ
	                    |	Справочник.СД_МониторингЭлПочты КАК СД_МониторингЭлПочты
	                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящееПисьмо КАК ВходящееПисьмо
	                    |			ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ТипыТекстовПочтовыхСообщений КАК ТипыТекстовПочтовыхСообщений
	                    |			ПО ВходящееПисьмо.ТипТекста = ТипыТекстовПочтовыхСообщений.Ссылка
	                    |		ПО СД_МониторингЭлПочты.УчетнаяЗаписьПриемаЭлПочты = ВходящееПисьмо.УчетнаяЗапись
	                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СД_Сервисы КАК СД_Сервисы
	                    |		ПО СД_МониторингЭлПочты.СервисТехПоддержки = СД_Сервисы.Ссылка
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОПрочтении КАК СведенияОПрочтении
	                    |		ПО (ВходящееПисьмо.Ссылка = СведенияОПрочтении.Объект)
	                    |			И (СД_Сервисы.Ч_ПользовательПочты = СведенияОПрочтении.Пользователь)
	                    |ГДЕ
	                    |	СД_МониторингЭлПочты.ПометкаУдаления = ЛОЖЬ
	                    |	И СД_МониторингЭлПочты.Включен = ИСТИНА
	                    |	И ЕСТЬNULL(СведенияОПрочтении.Прочтен, ЛОЖЬ) = ЛОЖЬ
	                    |	И ВходящееПисьмо.ОтправительАдресат.Адрес <> СД_МониторингЭлПочты.УчетнаяЗаписьПриемаЭлПочты.Наименование");

	СтрокаЗаголовка = Запрос.Выполнить().Выбрать();


	//обработаем таблицу заголовков для каждого мониторинга
	Пока СтрокаЗаголовка.Следующий() Цикл
		
		ОтправительАдресЭП=СД_ИнтернетШлюзСервер.ПолучитьАдресЭПИзСтрокиЭлектронногоАдреса(СтрокаЗаголовка.Отправитель);
		УчетнаяЗаписьМониторинга = СтрокаЗаголовка.УчетнаяЗаписьМониторинга;

		Если НРег(ОтправительАдресЭП)=НРег(УчетнаяЗаписьМониторинга.АдресЭлектроннойПочты) Тогда
			//исключим обработку собственных писем, чтобы не войти в бесконечный цикл обработки своих же уведомлений
			ЗафиксироватьОбработкуПисьма(СтрокаЗаголовка, УчетнаяЗаписьМониторинга);
			Продолжить;
		КонецЕсли;
 
		ТемаПисьма=СтрокаЗаголовка.Тема;

		//проверим тему письма на нахождение в ней тикета существующей заявки
		ТикетЗаявки=СД_ИнтернетШлюзСервер.ПолучитьТикетИзТемыПисьма(ТемаПисьма);
		Если НЕ ПустаяСтрока(ТикетЗаявки) Тогда
			ЗаявкаСсылка=СД_ОбщееВызовСервера.ПолучитьЗаявкуПоТикету(ТикетЗаявки);
			Если ЗначениеЗаполнено(ЗаявкаСсылка) Тогда
			//	СтрокаЗаголовка.Принимать=Истина;
				СтрокаТЧ=ТаблицаПоясненийКСуществующимЗаявкам.Добавить();
				СтрокаТЧ.Заявка=ЗаявкаСсылка;
				СтрокаТЧ.UID=СтрокаЗаголовка.UID;
				//Продолжить;
			Иначе
				//тикет был найден, но для него нет заявки
				СД_ИнтернетШлюзСервер.ОтправитьОшибкуВТикете(ОтправительАдресЭП, ТикетЗаявки, УчетнаяЗаписьМониторинга, ТемаПисьма, СтрокаЗаголовка.СсылкаНаМониторинг); 
				СД_ОбщееВызовСервера.ЗаписатьОшибку("По тикету "+ТикетЗаявки+" не найдена заявка. Пояснение не загружено");				
				ЗафиксироватьОбработкуПисьма(СтрокаЗаголовка, УчетнаяЗаписьМониторинга);					
				Продолжить;						
			КонецЕсли;
		КонецЕсли;

		Если СтрокаЗаголовка.СсылкаНаМониторинг.ТипОбработки=Перечисления.СД_ТипыОбработкиИнтернетШлюза.ПриниматьОтЗарегистрированных Тогда
			//проверим, есть ли такой отправитель в нашей базе					
			Если НЕ СД_ИнтернетШлюзСервер.ОтправительЗарегистрирован(ОтправительАдресЭП) Тогда
				//отправим отказ инициатору
				СД_ИнтернетШлюзСервер.ОтправитьОтказРегистрацииТикета(ОтправительАдресЭП, УчетнаяЗаписьМониторинга, ТемаПисьма, СтрокаЗаголовка.СсылкаНаМониторинг); 
				СД_ОбщееВызовСервера.ЗаписатьОшибку("Адрес эл. почты "+ОтправительАдресЭП+" не зарегистрирован в справочниках. Письмо отклонено.");				
				ЗафиксироватьОбработкуПисьма(СтрокаЗаголовка, УчетнаяЗаписьМониторинга);			
				Продолжить;
			КонецЕсли;

		КонецЕсли;

		//
		СтрокаПисьма = Новый Структура();
		СтрокаПисьма.Вставить("UID", СтрокаЗаголовка.UID);
		СтрокаПисьма.Вставить("СвязьСБазойДанных", ПолучитьСвязьСБазойДанныхПоАдресуЭлПочты(ОтправительАдресЭП));
		СтрокаПисьма.Вставить("ИмяОтправителя", СтрокаЗаголовка.Отправитель);
		СтрокаПисьма.Вставить("Тема", СтрокаЗаголовка.Тема);
		СтрокаПисьма.Вставить("ДатаОтправления", СтрокаЗаголовка.ДатаОтправления);
		СтрокаПисьма.Вставить("ОбратныйАдрес", ОтправительАдресЭП);
		СтрокаПисьма.Вставить("Отправитель", СтрокаЗаголовка.Отправитель);
		СтрокаПисьма.Вставить("Кодировка", СтрокаЗаголовка.Кодировка);
		СтрокаПисьма.Вставить("Размер", СтрокаЗаголовка.Размер);
		СтрокаПисьма.Вставить("ПользовательПочты", СтрокаЗаголовка.ПользовательПочты);
		
		//РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗаголовка.UID, 
		//	"ТипТекста, Ссылка, ТекстПисьмаHTMLХранилище, ТекстПисьмаПростойТекстХранилище, Кодировка, ОтправительАдресат, ДатаОтправки, Тема, ПолучателиПисьма, ПолучателиКопий, Дата, ВнутреннийЗаголовок, Важность, Комментарий");

		Текст = СтрокаЗаголовка.ТекстПисьмаХранилище.Получить();
		Тексты = новый массив;
		Тексты.Добавить(Новый Структура("ТипТекста,Текст,Кодировка,Данные", СтрокаЗаголовка.ТипТекста, Текст, СтрокаЗаголовка.Кодировка, Текст));
		СтрокаПисьма.Вставить("Тексты", Тексты);
		
		
		ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
			СтрокаЗаголовка.UID, // Письмо
			Истина, // ФормироватьРазмерПредставление
			Ложь, // ВключатьПомеченныеНаУдаление
			Ложь,    // ТолькоСИдентификаторами
			Истина); // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать
			
		Вложения = Новый Массив;
		Для каждого ФайлыПисьмаСтрока Из ФайлыПисьма Цикл
			
			ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(ФайлыПисьмаСтрока.ТекущаяВерсия);
			Вложения.Добавить(Новый Структура("Ключ,Значение", ФайлыПисьмаСтрока.Представление, ДанныеФайла));
			
		КонецЦикла;
		СтрокаПисьма.Вставить("Вложения", Вложения);
		
		Если ЗначениеЗаполнено(ЗаявкаСсылка) Тогда
			ОбъектСоздан=СоздатьПояснениеКЗаявке(СтрокаПисьма, СтрокаЗаголовка.УчетнаяЗаписьМониторинга, ЗаявкаСсылка, СтрокаЗаголовка.СсылкаНаМониторинг);
			Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
			                    |	СД_Решение.Ссылка КАК Документ,
			                    |	СД_Решение.Автор КАК Автор,
			                    |	СД_Решение.Дата КАК Дата,
			                    |	СД_СвязьСЗадачами.Задача КАК Задача,
			                    |	СД_СвязьСЗадачами.Задача.Выполнена КАК Выполнена,
			                    |	СД_ПараметрыЗаявок.ЗначениеПараметра КАК СтатусЗаявки
			                    |ИЗ
			                    |	Документ.СД_Решение КАК СД_Решение
			                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СД_СвязьСЗадачами КАК СД_СвязьСЗадачами
			                    |		ПО (СД_СвязьСЗадачами.Документ = СД_Решение.Ссылка)
								|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СД_ПараметрыЗаявок.СрезПоследних(, ПараметрЗаявки = &ПараметрЗаявкиСтатус) КАК СД_ПараметрыЗаявок
								|		ПО (СД_ПараметрыЗаявок.Заявка = СД_Решение.Заявка)
			                    |ГДЕ
			                    |	СД_Решение.ПометкаУдаления = ЛОЖЬ
			                    |	И СД_Решение.Заявка = &Заявка
			                    |
			                    |УПОРЯДОЧИТЬ ПО
			                    |	СД_Решение.Дата УБЫВ");
	
			Запрос.УстановитьПараметр("Заявка", ЗаявкаСсылка);
			Запрос.УстановитьПараметр("ПараметрЗаявкиСтатус", ПланыВидовХарактеристик.СД_ПараметрыЗаявок.СтатусЗаявки);
			Данные = Запрос.Выполнить().Выбрать();
			Если Данные.Следующий() Тогда
				РегистрыСведений.ОчередьУведомлений.ДобавитьУведомление(
					Данные.Автор,
					Справочники.ВидыБизнесСобытий.ПолучениеВходящегоПисьма,
					Перечисления.СпособыУведомления.ПоПочте,
					СтрокаЗаголовка.UID,
					СтрокаЗаголовка.UID,
					"Поступило новое пояснение к заявке " + Строка(ЗаявкаСсылка));
					
				// Добавить обработку, если Заявка закрыта, то открыть
				Если Данные.СтатусЗаявки = ПредопределенноеЗначение("Перечисление.СД_СтатусыЗаявок.Закрыта") Тогда
					
					УстанавливаемыйСтатусЗаявки=ПредопределенноеЗначение("Перечисление.СД_СтатусыЗаявок.РешениеПодготовлено");
					
					СохранитьСтруктуруСостоянияЗаявки(ЗаявкаСсылка, УстанавливаемыйСтатусЗаявки, СтрокаЗаголовка.UID);
				КонецЕсли;
				
			КонецЕсли;
				
				
		Иначе
			ОбъектСоздан=СоздатьЗаявкуТехПоддержкиПоПисьму(СтрокаПисьма, СтрокаЗаголовка.УчетнаяЗаписьМониторинга, СтрокаЗаголовка.СсылкаНаМониторинг);
		КонецЕсли;

		Если ОбъектСоздан Тогда
			РегистрыСведений.СведенияОПрочтении.УстановитьСведенияОПрочтении(СтрокаЗаголовка.UID, Истина, СтрокаЗаголовка.ПользовательПочты);
			КоличествоСозданныхОбъектов=КоличествоСозданныхОбъектов+1;
		КонецЕсли;
		
	КонецЦикла; //по таблице заголовков


	ЗаписьЖурналаРегистрации("Service Desk: Мониторинг почты", УровеньЖурналаРегистрации.Информация, , УчетнаяЗаписьМониторинга, "Мониторинг завершен. Количество созданных объектов: "+Формат(КоличествоСозданныхОбъектов,"ЧЦ=15; ЧДЦ=0; ЧН=" ));	

КонецПроцедуры

&Вместо("МониторингЭлектроннойПочты")
Процедура ЧСД_МониторингЭлектроннойПочты()
	// Вставить содержимое метода.
	ЧСД_ОбработатьМониторингЭлектроннойПочты();
КонецПроцедуры

&Вместо("СоздатьЗаявкуТехПоддержкиПоПисьму")
Функция ЧСД_СоздатьЗаявкуТехПоддержкиПоПисьму(СтрокаПисьма, УчетнаяЗапись, ЭлементМониторинга)
		УстановитьПривилегированныйРежим(Истина);
	
	ИнициаторЗаявки=СтрокаПисьма.СвязьСБазойДанных;
	СервисТехПоддержки=ЭлементМониторинга.СервисТехПоддержки;
	ОтправительАдресЭП=СД_ИнтернетШлюзСервер.ПолучитьАдресЭПИзСтрокиЭлектронногоАдреса(СтрокаПисьма.Отправитель);
	
	Если Константы.СД_ИспользоватьЛимитыОбращений.Получить() Тогда
		//проверим лимиты обращений
		ОшибкаЛимита=СД_ОбщееВызовСервера.ЗаявкаВходитВЛимит(ИнициаторЗаявки, СервисТехПоддержки);
		Если НЕ ПустаяСтрока(ОшибкаЛимита) Тогда
			
			ТекстОшибки="Превышен лимит для: "+СокрЛП(ИнициаторЗаявки)+"; сервис: "+СокрЛП(СервисТехПоддержки)+" адресат "+ОтправительАдресЭП+": "+ОшибкаЛимита;			
			ЗаписьЖурналаРегистрации("Service Desk: Загрузка заявки из эл. почты", УровеньЖурналаРегистрации.Предупреждение, , УчетнаяЗапись, ТекстОшибки);
			ЗаписатьВЖурналИнтернетШлюза(ТекстОшибки, УчетнаяЗапись, ИнициаторЗаявки);
			ОтправитьОтказПревышениеЛимита(ОтправительАдресЭП, УчетнаяЗапись, "Re: "+СокрЛП(СтрокаПисьма.Тема)+" (превышен лимит обращений)", ЭлементМониторинга);
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	АвторСообщения=СД_ИнтернетШлюзСервер.ПолучитьАвтораСообщения(СокрЛП(ОтправительАдресЭП));
	КомментарийДокумента="Создано загрузкой из почты "+СокрЛП(УчетнаяЗапись)+" от адресата "+ОтправительАдресЭП+" "+СокрЛП(ТекущаяДата());

	ОтправительИмя=СтрокаПисьма.ИмяОтправителя;
	
	НовыйОбъект=Документы.СД_Заявка.СоздатьДокумент();
	НовыйОбъект.Сервис=СервисТехПоддержки;
	НовыйОбъект.ВидЗаявки=ЭлементМониторинга.ВидЗаявки;
	НовыйОбъект.Дата=СтрокаПисьма.ДатаОтправления;
	НовыйОбъект.ТемаЗаявки=СтрокаПисьма.Тема;
	НовыйОбъект.ИннициаторЗаявкиАдресЭлПочты=ОтправительАдресЭП;
	НовыйОбъект.ИннициаторЗаявкиИмяОтправителя=ОтправительИмя;
	НовыйОбъект.ИнициаторЗаявки=ИнициаторЗаявки;
	НовыйОбъект.СпособДоставки=Перечисления.СД_СпособыСоздания.ЭлектроннаяПочта;
	НовыйОбъект.УчетнаяЗаписьПолученияЗаявки=УчетнаяЗапись;
	НовыйОбъект.Примечание=КомментарийДокумента;
	НовыйОбъект.Ч_Предмет = СтрокаПисьма.UID;
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.ИнициаторЗаявки) Тогда
		НовыйОбъект.ИнициаторЗаявки=СервисТехПоддержки.Ответственный;
	КонецЕсли;
	
	Если ПустаяСтрока(НовыйОбъект.ТемаЗаявки) Тогда
		НовыйОбъект.ТемаЗаявки="Импортированная заявка от "+СокрЛП(ОтправительАдресЭП);
	КонецЕсли;
	
	//установим содержимое документа
	Если СтрокаПисьма.Тексты.Количество()>0 Тогда
		ТекстСоответствие=СтрокаПисьма.Тексты[0];
		ТипТекста=ТекстСоответствие["ТипТекста"]; //строка "ПростойТекст" и т.д.
		ТекстСообщения=ТекстСоответствие["Текст"]; //текст сообщения
		
		Кодировка=ТекстСоответствие["Кодировка"]; //строка "windows-1251" и другие
		ИсходныеДанные=ТекстСоответствие["Данные"]; //исходные двоичные данные письма
		
		НовыйОбъект.ОписаниеЗаявкиТекст=ТекстСообщения;
		
	КонецЕсли;
	
	ОписаниеЗаявкиТекст=НовыйОбъект.ОписаниеЗаявкиТекст;
	ОписаниеЗаявкиТекст=СтрЗаменить(ОписаниеЗаявкиТекст, Символы.ПС, "<br>");
	
	ФормДокумент=Новый ФорматированныйДокумент;
	ФормДокумент.УстановитьHTML(ОписаниеЗаявкиТекст, Новый Структура);
	НовыйОбъект.ОписаниеЗаявкиХранилищеФорматированногоТекста=Новый ХранилищеЗначения(ФормДокумент);
		
	Попытка
		НовыйОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ТекстОшибки=ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Загрузка заявки тех. поддежрки из мониторинга почты", УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		Сообщить(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;	
	
	ЗаявкаСсылка=НовыйОбъект.Ссылка;
	ЗаписьЖурналаРегистрации("Service Desk: Загрузка заявки из эл. почты", УровеньЖурналаРегистрации.Информация, , УчетнаяЗапись, "Успешно создан: "+СокрЛП(ЗаявкаСсылка));	
	
	ЗаписатьВЖурналИнтернетШлюза("Загружена заявка "+СокрЛП(ЗаявкаСсылка)+" с адреса "+ОтправительАдресЭП, УчетнаяЗапись, СтрокаПисьма.СвязьСБазойДанных);
	
	Если НЕ ПустаяСтрока(ОтправительИмя) 
		И (ТипЗнч(ЗаявкаСсылка.ИнициаторЗаявки)=Тип("СправочникСсылка.СД_ВнешниеКлиенты")) 
		И ПустаяСтрока(ЗаявкаСсылка.ИнициаторЗаявки.ИмяЗарегистрированногоПользователя) 
	Тогда
		//обновим данные
		СпрОбъект=ЗаявкаСсылка.ИнициаторЗаявки.ПолучитьОбъект();
		СпрОбъект.ИмяЗарегистрированногоПользователя=ОтправительИмя;
		Попытка
			СпрОбъект.Записать();
		Исключение
			СД_ОбщееВызовСервера.ЗаписатьОшибку(ОписаниеОшибки(),,Ложь);
		КонецПопытки;
	КонецЕсли;	
	
	Если ЭлементМониторинга.ЗагружатьВложения И СтрокаПисьма.Вложения.Количество()>0 Тогда
		
		ПапкаФайла=ЭлементМониторинга.ПапкаДляВложенныхФайлов;
					
		ТекСоответствие=СтрокаПисьма.Вложения;
		Для Каждого ЗначениеСоответствия Из ТекСоответствие Цикл
			ТемаПисьма=Строка(СтрокаПисьма.Тема);
			ИмяФайла=ЗначениеСоответствия.Ключ;
			ДвоичныеДанные=ЗначениеСоответствия.Значение;
			Если ПустаяСтрока(ИмяФайла) Тогда
				ТекстОшибки="Пустое имя файла вложения";
                ЗаписьЖурналаРегистрации("Service Desk: Загрузка заявки из эл. почты", УровеньЖурналаРегистрации.Ошибка, , ТемаПисьма, ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			Размер=ДвоичныеДанные.Размер();
			Комментарий="Заявка тех. поддержки """+ТемаПисьма+"""";
			СтруктураИмениФайла=СД_ОбщееВызовСервераПовтИсп.ПолучитьСтруктуруИмениФайла(ИмяФайла);
						
			//создадим файл где реквизит ВладелецФайлов будет равен значению ПапкаДляВложенныхФайлов мониторинга
			
			Если Не РасширениеФайлаРазрешеноДляЗагрузки(СтруктураИмениФайла.РасширениеФайла) Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена. Обратитесь к администратору системы.'"), СтруктураИмениФайла.РасширениеФайла);
					
				СД_ОбщееВызовСервера.ЗаписатьОшибку(СообщениеОбОшибке,,Ложь);
				Возврат Неопределено;
			КонецЕсли;
			
			АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			
			ДатаФайла=СтрокаПисьма.ДатаОтправления;
			
			УниверсальноеВремя = РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(ДатаФайла);
			
			ПараметрыРаспознавания = ПолучитьПараметрыРаспознавания();
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.АдресВременногоХранилищаФайла = АдресФайла;
			СведенияОФайле.ИмяБезРасширения = СтруктураИмениФайла.ИмяФайлаБезРасширения;
			СведенияОФайле.РасширениеБезТочки = СтруктураИмениФайла.РасширениеФайла;
			СведенияОФайле.Размер = Размер;
			СведенияОФайле.ВремяИзменения = ДатаФайла;
			СведенияОФайле.ВремяИзмененияУниверсальное = УниверсальноеВремя;
			СведенияОФайле.Комментарий = Комментарий;
			СведенияОФайле.ПараметрыРаспознавания = ПараметрыРаспознавания;
			СведенияОФайле.ХранитьВерсии = Истина;
			СведенияОФайле.ЗаписатьВИсторию = Ложь;
			
			НовыйФайл = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ПапкаФайла, СведенияОФайле);
			
			//добавим созданный файл в регистр СД_СписокПриложений как значение измерения ОбъектПриложения
			РегСведений=РегистрыСведений.СД_СписокПриложений.СоздатьНаборЗаписей();
			РегСведений.Отбор.ВладелецСсылки.Установить(ЗаявкаСсылка);
			РегСведений.Отбор.ОбъектПриложения.Установить(НовыйФайл);
			РегСведений.Прочитать();
			
			Если РегСведений.Количество()=0 Тогда
				Запись=РегСведений.Добавить();
				Запись.ВладелецСсылки=ЗаявкаСсылка;
				Запись.ОбъектПриложения=НовыйФайл;
				Запись.Информация="Файл из эл. почты";
			Иначе
				Запись=РегСведений[0];
				Запись.Информация="Файл из эл. почты";
			КонецЕсли;
			
			Попытка
				РегСведений.Записать(Истина);
			Исключение
				СД_ОбщееВызовСервера.ЗаписатьОшибку(ОписаниеОшибки(), "Service Desk: Добавление файла в приложение", Ложь);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//ЗафиксироватьОбработкуПисьма(СтрокаПисьма, УчетнаяЗапись);

	Если НовыйОбъект.Сервис.МоментФормированияТикета=0 Тогда
		ТикетЗаявки=СД_ОбщееВызовСервера.СформироватьТикетПоЗаявке(ЗаявкаСсылка);		
	Иначе
		ТикетЗаявки="";
	КонецЕсли;
	
	//запишем состояние заявки Импорт
	
	СтруктураСостоянияЗаявки=СД_ОбщееВызовСервера.СформироватьСтруктуруСостоянияЗаявки();	
	СтруктураСостоянияЗаявки.СтатусЗаявки=Перечисления.СД_СтатусыЗаявок.Импортирована;
	СтруктураСостоянияЗаявки.ПриоритетЗаявки=Справочники.СД_Приоритет.Средний;
	СтруктураСостоянияЗаявки.ИнициаторЗаявки=ЗаявкаСсылка.ИнициаторЗаявки;
	СтруктураСостоянияЗаявки.ТикетЗаявки=ТикетЗаявки;
	СтруктураСостоянияЗаявки.ДатаЗакрытия=Дата("00010101");
	
	ОснованиеИзмененияСостояния=ЗаявкаСсылка.УчетнаяЗаписьПолученияЗаявки;
	СД_ОбщееВызовСервера.СохранитьСтруктуруСостоянияЗаявки(ЗаявкаСсылка, СтруктураСостоянияЗаявки, ОснованиеИзмененияСостояния, ТекущаяДата()-1);
		
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ЗаявкаСсылка);
	
	ФоновыеЗадания.Выполнить("СД_ОбщееВызовСервера.СтартоватьБизнесПроцессПоЗаявке", 
		ПараметрыЗадания, 
		Новый УникальныйИдентификатор, 
		"Старт процесса тех. поддержки: "+СокрЛП(ЗаявкаСсылка.ТемаЗаявки));
		
	СтруктураСостоянияЗаявки.СтатусЗаявки=Перечисления.СД_СтатусыЗаявок.Отправлена;
	
	//запишем состояние заявки Отправлена
	ОснованиеИзмененияСостояния=ЗаявкаСсылка;
	СД_ОбщееВызовСервера.СохранитьСтруктуруСостоянияЗаявки(ЗаявкаСсылка, СтруктураСостоянияЗаявки, ОснованиеИзмененияСостояния);	
	
	Возврат Истина;

КонецФункции

&Вместо("ЗафиксироватьОбработкуПисьма")
Функция ЧСД_ЗафиксироватьОбработкуПисьма(СтрокаПисьма, УчетнаяЗапись)
	РегистрыСведений.СведенияОПрочтении.УстановитьСведенияОПрочтении(СтрокаПисьма.UID, Истина, СтрокаПисьма.ПользовательПочты);
	// Результат = ПродолжитьВызов(СтрокаПисьма, УчетнаяЗапись);
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьСтруктуруСостоянияЗаявки(ЗаявкаСсылка, УстанавливаемыйСтатусЗаявки, ДокументОснование)
	
	СтруктураСостоянияЗаявки=СД_ОбщееВызовСервера.ПрочитатьСтруктуруСостоянияЗаявки(ЗаявкаСсылка);

	//обновим структуру заявки по реквизитам формы документа

	Если СтруктураСостоянияЗаявки.СтатусЗаявки<>УстанавливаемыйСтатусЗаявки	Тогда
		СтруктураСостоянияЗаявки.СтатусЗаявки = УстанавливаемыйСтатусЗаявки;
		//запишем состояние заявки
		СД_ОбщееВызовСервера.СохранитьСтруктуруСостоянияЗаявки(ЗаявкаСсылка, СтруктураСостоянияЗаявки, ДокументОснование);
	КонецЕсли;
	
	
КонецПроцедуры



